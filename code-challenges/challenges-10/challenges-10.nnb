{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Hacker Rank\n\nFor Thursdays you will be solving some selected challenges on HackerRank, please create an account if you don't have then\nFollow the links below:\nread them carefully and solve them then copy-paste your solution below in Code Block"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Required**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                " function compareTriplets(a, b) {\n    let aliceScore = 0;\n     let bobScore = 0;\n    \nfor (let i = 0; i < 3; i++) {\n         if (a[i] > b[i]) {\n             aliceScore++;\n        } else if (a[i] < b[i]) {\n             bobScore++;\n         }\n     }\n    \n    console.log(aliceScore, bobScore);\n }"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Optional**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Compare The Triplets](https://www.hackerrank.com/challenges/compare-the-triplets/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                " \n\n const n = parseInt();\nlet maxNum = -Infinity;\nlet count = 0;\n\nfor (let i = 0; i < n; i++) {\n    const input = parseInt();\n    if (!isNaN(input)) {\n        if (input > maxNum) {\n            maxNum = input;\n            count = 1;  // Reset count to 1 if a new maximum is found\n        } else if (input === maxNum) {\n            count++;  // Increment count if the input is equal to the current maximum\n        }\n    }\n}\n\nconsole.log(count);  // Print the count of occurrences of the maximum number"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "0",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Migratory Birds](https://www.hackerrank.com/challenges/migratory-birds/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// third \nlet n = parseInt();\nlet arr = [];\nlet mx = 0;\n\nfor (let i = 0; i < n; i++) {\n    \n    let input = parseInt();\n    arr.push(input);\n\n    mx = Math.max(mx, input);\n}\nlet counter = 0;\nfor (let i = 0; i < n; i++) {\n    if (arr[i] === mx) {\n        counter++;\n    }\n}\n\nconsole.log(counter);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "0",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}